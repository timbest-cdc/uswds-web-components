/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface UsaAccordion {
    'bordered'?: boolean;
  }
  interface UsaAccordionItem {
    '_id': string;
    'heading': string;
    'isActive'?: boolean;
  }
  interface UsaAlert {
    'interactive'?: boolean;
    'variant'?: "success" | "warning" | "error" | "info";
  }
  interface UsaBanner {
    'tld'?: "mil" | "gov";
  }
  interface UsaButton {
    'active'?: boolean;
    'buttonType'?: | "button"
    | "submit"
    | "reset";
    'disabled'?: boolean;
    'focused'?: boolean;
    'hover'?: boolean;
    'href'?: string;
    'size'?: "big";
    'unstyled'?: boolean;
    'variant'?: | "default"
    | "secondary"
    | "accent-cool"
    | "base"
    | "outline"
    | "outline-inverse";
  }
  interface UsaLink {
    'external'?: boolean;
    'href'?: string;
  }
  interface UsaTag {}
  interface UsaTextInput {
    'active'?: boolean;
    'class'?: string;
    'disabled'?: boolean;
    'error'?: boolean;
    'focused'?: boolean;
    'hover'?: boolean;
    'maxlength'?: number;
    'name'?: string;
    'readonly'?: boolean;
    'size'?: number;
    'success'?: boolean;
    'type': string;
    'value'?: string;
  }
}

declare global {


  interface HTMLUsaAccordionElement extends Components.UsaAccordion, HTMLStencilElement {}
  var HTMLUsaAccordionElement: {
    prototype: HTMLUsaAccordionElement;
    new (): HTMLUsaAccordionElement;
  };

  interface HTMLUsaAccordionItemElement extends Components.UsaAccordionItem, HTMLStencilElement {}
  var HTMLUsaAccordionItemElement: {
    prototype: HTMLUsaAccordionItemElement;
    new (): HTMLUsaAccordionItemElement;
  };

  interface HTMLUsaAlertElement extends Components.UsaAlert, HTMLStencilElement {}
  var HTMLUsaAlertElement: {
    prototype: HTMLUsaAlertElement;
    new (): HTMLUsaAlertElement;
  };

  interface HTMLUsaBannerElement extends Components.UsaBanner, HTMLStencilElement {}
  var HTMLUsaBannerElement: {
    prototype: HTMLUsaBannerElement;
    new (): HTMLUsaBannerElement;
  };

  interface HTMLUsaButtonElement extends Components.UsaButton, HTMLStencilElement {}
  var HTMLUsaButtonElement: {
    prototype: HTMLUsaButtonElement;
    new (): HTMLUsaButtonElement;
  };

  interface HTMLUsaLinkElement extends Components.UsaLink, HTMLStencilElement {}
  var HTMLUsaLinkElement: {
    prototype: HTMLUsaLinkElement;
    new (): HTMLUsaLinkElement;
  };

  interface HTMLUsaTagElement extends Components.UsaTag, HTMLStencilElement {}
  var HTMLUsaTagElement: {
    prototype: HTMLUsaTagElement;
    new (): HTMLUsaTagElement;
  };

  interface HTMLUsaTextInputElement extends Components.UsaTextInput, HTMLStencilElement {}
  var HTMLUsaTextInputElement: {
    prototype: HTMLUsaTextInputElement;
    new (): HTMLUsaTextInputElement;
  };
  interface HTMLElementTagNameMap {
    'usa-accordion': HTMLUsaAccordionElement;
    'usa-accordion-item': HTMLUsaAccordionItemElement;
    'usa-alert': HTMLUsaAlertElement;
    'usa-banner': HTMLUsaBannerElement;
    'usa-button': HTMLUsaButtonElement;
    'usa-link': HTMLUsaLinkElement;
    'usa-tag': HTMLUsaTagElement;
    'usa-text-input': HTMLUsaTextInputElement;
  }
}

declare namespace LocalJSX {
  interface UsaAccordion {
    'bordered'?: boolean;
  }
  interface UsaAccordionItem {
    '_id'?: string;
    'heading': string;
    'isActive'?: boolean;
    'onRegisterItem'?: (event: CustomEvent<any>) => void;
    'onSetActive'?: (event: CustomEvent<any>) => void;
    'onUnregisterItem'?: (event: CustomEvent<any>) => void;
  }
  interface UsaAlert {
    'interactive'?: boolean;
    'variant'?: "success" | "warning" | "error" | "info";
  }
  interface UsaBanner {
    'tld'?: "mil" | "gov";
  }
  interface UsaButton {
    'active'?: boolean;
    'buttonType'?: | "button"
    | "submit"
    | "reset";
    'disabled'?: boolean;
    'focused'?: boolean;
    'hover'?: boolean;
    'href'?: string;
    'onButtonClicked'?: (event: CustomEvent<void>) => void;
    'size'?: "big";
    'unstyled'?: boolean;
    'variant'?: | "default"
    | "secondary"
    | "accent-cool"
    | "base"
    | "outline"
    | "outline-inverse";
  }
  interface UsaLink {
    'external'?: boolean;
    'href'?: string;
  }
  interface UsaTag {}
  interface UsaTextInput {
    'active'?: boolean;
    'class'?: string;
    'disabled'?: boolean;
    'error'?: boolean;
    'focused'?: boolean;
    'hover'?: boolean;
    'maxlength'?: number;
    'name'?: string;
    'readonly'?: boolean;
    'size'?: number;
    'success'?: boolean;
    'type'?: string;
    'value'?: string;
  }

  interface IntrinsicElements {
    'usa-accordion': UsaAccordion;
    'usa-accordion-item': UsaAccordionItem;
    'usa-alert': UsaAlert;
    'usa-banner': UsaBanner;
    'usa-button': UsaButton;
    'usa-link': UsaLink;
    'usa-tag': UsaTag;
    'usa-text-input': UsaTextInput;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'usa-accordion': LocalJSX.UsaAccordion & JSXBase.HTMLAttributes<HTMLUsaAccordionElement>;
      'usa-accordion-item': LocalJSX.UsaAccordionItem & JSXBase.HTMLAttributes<HTMLUsaAccordionItemElement>;
      'usa-alert': LocalJSX.UsaAlert & JSXBase.HTMLAttributes<HTMLUsaAlertElement>;
      'usa-banner': LocalJSX.UsaBanner & JSXBase.HTMLAttributes<HTMLUsaBannerElement>;
      'usa-button': LocalJSX.UsaButton & JSXBase.HTMLAttributes<HTMLUsaButtonElement>;
      'usa-link': LocalJSX.UsaLink & JSXBase.HTMLAttributes<HTMLUsaLinkElement>;
      'usa-tag': LocalJSX.UsaTag & JSXBase.HTMLAttributes<HTMLUsaTagElement>;
      'usa-text-input': LocalJSX.UsaTextInput & JSXBase.HTMLAttributes<HTMLUsaTextInputElement>;
    }
  }
}


